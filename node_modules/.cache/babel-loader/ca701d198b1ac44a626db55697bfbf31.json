{"ast":null,"code":"var _jsxFileName = \"/Users/maxsnz/sites/_TMP/posts-breaking/src/Article/Article.jsx\";\nimport React, { Fragment } from 'react';\nimport { getChildNodes } from '../utils';\nimport Banner from '../Banner';\nimport SideBanner from '../SideBanner';\nimport InnerHtmlWithScriptsContainer from '../InnerHtmlWithScriptsContainer';\nimport './Article.css';\nconst groupLength = 5; // разрываем пост через каждые 5 частей\n\nconst Article = ({\n  post,\n  banner\n}) => {\n  // контейнер bfg-post в виде строки со всеми атрибутами\n  const wrapContainerTopStr = post.substr(0, post.indexOf('>') + 1); // оборачивает любой html контейнером bfg-post\n\n  const wrapWithContainer = node => \"\".concat(wrapContainerTopStr).concat(node, \"</div>\"); // разобъем пост на дочерние части\n\n\n  const nodes = getChildNodes(post); // количество групп частей поста: \n  // например, из 18 частей получается 4 группы: \n  // 5 + 5 + 5 + 3\n\n  const nodeGroupsLength = Math.floor(nodes.length / groupLength) + 1; // разобъем пост на группы\n\n  const nodeGroups = [...Array(nodeGroupsLength).keys()].map(index => nodes.slice(index * groupLength, (index + 1) * groupLength).join(''));\n  return React.createElement(\"div\", {\n    className: \"articleContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, nodeGroups.map((node, index) => React.createElement(Fragment, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, index > 0 && React.createElement(Banner, {\n    code: banner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"articleGrid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"articleSideColumn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(SideBanner, {\n    code: banner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"articleContentColumn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(InnerHtmlWithScriptsContainer, {\n    html: wrapWithContainer(node),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"articleSideColumn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(SideBanner, {\n    code: banner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }))))));\n};\n\nexport default Article;","map":{"version":3,"sources":["/Users/maxsnz/sites/_TMP/posts-breaking/src/Article/Article.jsx"],"names":["React","Fragment","getChildNodes","Banner","SideBanner","InnerHtmlWithScriptsContainer","groupLength","Article","post","banner","wrapContainerTopStr","substr","indexOf","wrapWithContainer","node","nodes","nodeGroupsLength","Math","floor","length","nodeGroups","Array","keys","map","index","slice","join"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,6BAAP,MAA0C,kCAA1C;AACA,OAAO,eAAP;AAEA,MAAMC,WAAW,GAAG,CAApB,C,CAAuB;;AAEvB,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAsB;AACpC;AACA,QAAMC,mBAAmB,GAAGF,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeH,IAAI,CAACI,OAAL,CAAa,GAAb,IAAoB,CAAnC,CAA5B,CAFoC,CAIpC;;AACA,QAAMC,iBAAiB,GAAGC,IAAI,cAAOJ,mBAAP,SAA6BI,IAA7B,WAA9B,CALoC,CAOpC;;;AACA,QAAMC,KAAK,GAAGb,aAAa,CAACM,IAAD,CAA3B,CARoC,CAUpC;AACA;AACA;;AACA,QAAMQ,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,MAAN,GAAeb,WAA1B,IAAyC,CAAlE,CAboC,CAepC;;AACA,QAAMc,UAAU,GAAG,CAAC,GAAGC,KAAK,CAACL,gBAAD,CAAL,CAAwBM,IAAxB,EAAJ,EAAoCC,GAApC,CAAwCC,KAAK,IAAIT,KAAK,CAACU,KAAN,CAAYD,KAAK,GAAGlB,WAApB,EAAiC,CAACkB,KAAK,GAAG,CAAT,IAAclB,WAA/C,EAA4DoB,IAA5D,CAAiE,EAAjE,CAAjD,CAAnB;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,UAAU,CAACG,GAAX,CAAe,CAACT,IAAD,EAAOU,KAAP,KACd,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIA,KAAK,GAAG,CAAT,IAAe,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAEf,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADlB,EAEE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,6BAAD;AAA+B,IAAA,IAAI,EAAEI,iBAAiB,CAACC,IAAD,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,EAOE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEL,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,CAFF,CADD,CADH,CADF;AAqBD,CAvCD;;AAyCA,eAAeF,OAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { getChildNodes } from '../utils';\nimport Banner from '../Banner';\nimport SideBanner from '../SideBanner';\nimport InnerHtmlWithScriptsContainer from '../InnerHtmlWithScriptsContainer';\nimport './Article.css';\n\nconst groupLength = 5; // разрываем пост через каждые 5 частей\n\nconst Article = ({ post, banner }) => {\n  // контейнер bfg-post в виде строки со всеми атрибутами\n  const wrapContainerTopStr = post.substr(0, post.indexOf('>') + 1);\n\n  // оборачивает любой html контейнером bfg-post\n  const wrapWithContainer = node => `${wrapContainerTopStr}${node}</div>`;\n\n  // разобъем пост на дочерние части\n  const nodes = getChildNodes(post);\n\n  // количество групп частей поста: \n  // например, из 18 частей получается 4 группы: \n  // 5 + 5 + 5 + 3\n  const nodeGroupsLength = Math.floor(nodes.length / groupLength) + 1;\n\n  // разобъем пост на группы\n  const nodeGroups = [...Array(nodeGroupsLength).keys()].map(index => nodes.slice(index * groupLength, (index + 1) * groupLength).join(''));\n\n  return (\n    <div className=\"articleContainer\">\n      {nodeGroups.map((node, index) => (\n        <Fragment key={index}>\n          {(index > 0) && <Banner code={banner} />}\n          <div className=\"articleGrid\">\n            <div className=\"articleSideColumn\">\n              <SideBanner code={banner} />\n            </div>\n            <div className=\"articleContentColumn\">\n              <InnerHtmlWithScriptsContainer html={wrapWithContainer(node)} />\n            </div>\n            <div className=\"articleSideColumn\">\n              <SideBanner code={banner} />\n            </div>\n          </div>\n        </Fragment>\n      ))}\n      \n    </div>\n  );\n}\n\nexport default Article;\n"]},"metadata":{},"sourceType":"module"}